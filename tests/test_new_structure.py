#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
"""

import asyncio
import sys
import os
import json

import pytest

sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from app.services.google_sheets_api import get_all_sheet_names, fetch_google_sheet_stock


async def explore_new_structure():
    """–ò—Å—Å–ª–µ–¥—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    print("üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´")
    print("=" * 60)
    print("üîó https://docs.google.com/spreadsheets/d/16flBHTR0XouAsjqN6dtgh23LjlzQZMc92cIQExh-HzA/edit")
    print()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã
    sheets = await get_all_sheet_names()
    if not sheets:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Å—Ç—ã")
        return

    print(f"üìã –ù–ê–ô–î–ï–ù–û –õ–ò–°–¢–û–í: {len(sheets)}")
    for i, sheet in enumerate(sheets, 1):
        print(f"   {i}. {sheet}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—Å—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    product_sheets = [s for s in sheets if s.lower() not in ['knowledge_base', '–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', 'settings']]

    print(f"\nüì¶ –õ–ò–°–¢–´ –° –¢–û–í–ê–†–ê–ú–ò: {len(product_sheets)}")
    for sheet in product_sheets:
        print(f"   ‚Ä¢ {sheet}")

    return product_sheets


async def test_category_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –≤–∞—à–∏–º–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID"""
    print(f"\nüß™ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    print("=" * 60)

    # –í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID —Ç–æ–≤–∞—Ä–æ–≤
    test_ids = [
        "7380225838",  # –ö—É—Ä—Ç–∫–∞ polo ralph lauren
        "4600496946",  # –°–≤–∏—Ç—à–æ—Ç Lyle Scott
        "7352966820",  # –°–≤–∏—Ç—à–æ—Ç Lyle Scott (–¥—Ä—É–≥–æ–π ID)
        "4600673225",  # –°–≤–∏—Ç—à–æ—Ç Lyle Scott (—Ç—Ä–µ—Ç–∏–π ID)
        "4569393163",  # –°–≤–∏—Ç—à–æ—Ç Lyle Scott (—á–µ—Ç–≤–µ—Ä—Ç—ã–π ID)
        "7256042815"  # –ï—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä
    ]

    results = {}

    for i, product_id in enumerate(test_ids, 1):
        test_url = f"https://www.avito.ru/moskva/odezhda_obuv_aksessuary/test_product_{product_id}"

        print(f"\nüìç –¢–ï–°–¢ {i}: ID {product_id}")
        print(f"   URL: {test_url}")
        print("-" * 40)

        try:
            result = await fetch_google_sheet_stock(test_url)
            if result:
                data = json.loads(result)
                category = data.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
                name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                colors = len(data.get('stock', []))

                print(f"   ‚úÖ –ù–ê–ô–î–ï–ù!")
                print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
                print(f"   üè∑Ô∏è  –¢–æ–≤–∞—Ä: {name}")
                print(f"   üé® –¶–≤–µ—Ç–æ–≤: {colors}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ª–∏—á–∏—è
                availability_check = True
                for stock_item in data.get('stock', []):
                    for size, status in stock_item.get('sizes', {}).items():
                        if status not in ["–ï—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏", "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"]:
                            availability_check = False
                            break

                print(f"   üìä –§–æ—Ä–º–∞—Ç –Ω–∞–ª–∏—á–∏—è: {'‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if availability_check else '‚ùå –û—à–∏–±–∫–∞'}")

                results[product_id] = {
                    'found': True,
                    'category': category,
                    'name': name,
                    'format_correct': availability_check
                }

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
                with open(f"result_{product_id}.json", 'w', encoding='utf-8') as f:
                    f.write(result)
                print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ result_{product_id}.json")

            else:
                print(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù")
                results[product_id] = {'found': False}

        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            results[product_id] = {'found': False, 'error': str(e)}

        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(1)

    return results


async def print_summary(results):
    """–í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)

    found_count = sum(1 for r in results.values() if r.get('found', False))
    total_count = len(results)

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {found_count}/{total_count}")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for product_id, result in results.items():
        if result.get('found'):
            category = result.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if category not in categories:
                categories[category] = []
            categories[category].append(product_id)

    if categories:
        print(f"\nüìÅ –¢–û–í–ê–†–´ –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú:")
        for category, ids in categories.items():
            print(f"   {category}: {len(ids)} —Ç–æ–≤–∞—Ä–æ–≤")
            for product_id in ids:
                product_name = results[product_id].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                print(f"      ‚Ä¢ {product_id}: {product_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤
    format_correct = all(r.get('format_correct', True) for r in results.values() if r.get('found'))
    print(f"\n‚úÖ –§–æ—Ä–º–∞—Ç –Ω–∞–ª–∏—á–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {'–î–∞' if format_correct else '–ù–µ—Ç'}")

    print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    if found_count > 0:
        print(f"   ‚úÖ –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π!")
        print(f"   ‚úÖ –¢–æ–≤–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
        print(f"   üîÑ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    else:
        print(f"   ‚ö†Ô∏è  –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print(f"      ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤")
        print(f"      ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è ID —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"      ‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ª–∏—Å—Ç–∞—Ö")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´")
    print("=" * 80)

    # –ò—Å—Å–ª–µ–¥—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    product_sheets = await explore_new_structure()

    if not product_sheets:
        print("‚ùå –ù–µ—Ç –ª–∏—Å—Ç–æ–≤ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    results = await test_category_search()

    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    await print_summary(results)


if __name__ == "__main__":
    from dotenv import load_dotenv

    load_dotenv()

    asyncio.run(main())
