from datetime import datetime, time
from fastapi import APIRouter, BackgroundTasks
from fastapi.responses import JSONResponse
from app.models.schemas import WebhookRequest
from app.services.avito_api import send_message, get_ad, get_user_info
from app.services.gpt import process_message
from app.services.telegram_notifier import send_alert
from app.services.logs import logger
from app.config import Settings, settings
from db.chat_crud import get_chat_by_id, create_chat, update_chat
from app.services.telegram_notifier import create_telegram_forum_topic
from db.messages_crud import get_latest_message_by_chat_id

from app.services.voice_recognition import voice_recognition
from app.models.voice_schemas import VoiceProcessingStatus

import asyncio

router = APIRouter()

# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–¥–∞—á–∏ –æ–∂–∏–¥–∞–Ω–∏—è
message_queues = {}
processing_tasks = {}


async def message_collector(chat_id, message: WebhookRequest):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ–∂–∏–¥–∞–Ω–∏—è """
    user_id = message.payload.value.user_id
    author_id = message.payload.value.author_id
    item_id = message.payload.value.item_id

    if str(message.payload.value.author_id) == "0":
        logger.info(f"–ü—Ä–æ–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        return None

    # üéôÔ∏è –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
    if message.is_voice_message():
        logger.info(f"[VoiceMessage] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if not voice_recognition.is_voice_recognition_enabled():
            logger.info(f"[VoiceMessage] –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            await send_alert("üéôÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω", 0)
            return None

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_url = message.get_voice_url()
        message_id = message.payload.value.id

        try:
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_result = await voice_recognition.process_voice_message(
                voice_url=voice_url,
                chat_id=chat_id,
                message_id=message_id
            )

            if voice_result.status == VoiceProcessingStatus.COMPLETED and voice_result.transcribed_text:
                # –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = voice_result.transcribed_text
                logger.info(
                    f"[VoiceMessage] –ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∑–∞ {voice_result.processing_time:.2f}—Å: '{message_text[:50]}...'")
                voice_alert = None

            else:
                # –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                error_msg = voice_result.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                logger.error(f"[VoiceMessage] –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {error_msg}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ—à–∏–±–∫–µ
                await send_message(user_id, chat_id,
                                   "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ Telegram –æ–± –æ—à–∏–±–∫–µ
                voice_alert = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}"
                await send_alert(voice_alert, 0)
                return None

        except Exception as e:
            logger.error(f"[VoiceMessage] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")
            await send_message(user_id, chat_id,
                               "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.")
            await send_alert(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è: {str(e)}", 0)
            return None

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç
    chat_url = f'https://www.avito.ru/profile/messenger/channel/{chat_id}'

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ad_url = await get_ad(user_id, item_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_name, user_url = await get_user_info(user_id, chat_id)
    current_time = datetime.now().time()
    is_night_time = time(22, 0) <= current_time or current_time <= time(10, 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –≤ –ë–î AIvito
    if not await get_chat_by_id(chat_id):
        logger.info(f"[Logic] –ß–∞—Ç {chat_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        thread_id = await create_telegram_forum_topic(f'{user_name}, {item_id}')
        await create_chat(chat_id, thread_id, author_id, user_id, chat_url, under_assistant=is_night_time)

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
        await send_alert(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç\n–ö–ª–∏–µ–Ω—Ç: {user_name}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {user_url}\n"
                         f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad_url}\n–°—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_url}\n", thread_id)
        logger.info(f"[Logic] –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç {chat_id}")

    chat_object = await get_chat_by_id(chat_id)

    if chat_object.under_assistant is False:
        logger.info(f'[Logic] –ß–∞—Ç –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ —á–∞—Ç–µ {chat_id} –¥–ª—è —é–∑–µ—Ä–∞ {user_id}')
        return None

    if Settings.WORKING_TIME_LOGIC:
        # –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∂–∏–º (10:00 - 22:00)
        if not is_night_time:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - —Å—Ç–∞–≤–∏–º –º–µ—Ç–∫—É
            if str(author_id) == str(user_id):
                await update_chat(
                    chat_id=chat_id,
                    under_assistant=False  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
                )
                logger.info(f"[Logic] –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ {chat_id}")
            logger.info(f"[Logic] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è {chat_id}")
            return None  # –ë–æ—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–Ω–µ–º

        # –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º (22:00 - 10:00)
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ –ë–î (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            if user_id == author_id:
                last_message = await get_latest_message_by_chat_id(chat_id)
                if last_message == message_text:
                    logger.info(f'[Logic] –•—É–∫ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}')
                else:
                    await update_chat(chat_id=chat_id, under_assistant=False)
                    await send_alert("‚ùóÔ∏è–ö —á–∞—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä", chat_object.thread_id)
                    logger.info(f'[Logic] –ö —á–∞—Ç—É {chat_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä')
                return None

    if user_id == author_id:
        last_message = await get_latest_message_by_chat_id(chat_id)
        if last_message == message_text:
            logger.info(f'[Logic] –•—É–∫ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}')
        else:
            await update_chat(chat_id=chat_id, under_assistant=False)
            await send_alert("‚ùóÔ∏è–ö —á–∞—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä", chat_object.thread_id)
            logger.info(f'[Logic] –ö —á–∞—Ç—É {chat_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä')
        return None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—É—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_id not in message_queues:
        message_queues[chat_id] = asyncio.Queue()

    queue = message_queues[chat_id]

    # üéôÔ∏è –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    queue_item = {
        'message': message,
        'message_text': message_text,
        'is_voice': message.is_voice_message(),
        'voice_alert': voice_alert
    }
    await queue.put(queue_item)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if chat_id in processing_tasks and not processing_tasks[chat_id].done():
        processing_tasks[chat_id].cancel()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
    processing_tasks[chat_id] = asyncio.create_task(
        process_queue_after_delay(chat_id, author_id, user_id, message_text, ad_url, user_name, chat_object.thread_id)
    )


async def process_queue_after_delay(chat_id, author_id, user_id, message_text, ad_url, user_name, thread_id):
    """ –ñ–¥–µ—Ç 20 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å """
    try:
        logger.info(f"[Queue] –û–∂–∏–¥–∞–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è {chat_id}")
        await asyncio.sleep(20)  # –û–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑ —Å–±—Ä–æ—Å–∞
    except asyncio.CancelledError:
        return  # –¢–∞–π–º–µ—Ä –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    queue = message_queues.get(chat_id)
    if not queue:
        return

    queue_items = []
    while not queue.empty():
        queue_items.append(await queue.get())

    # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏)
    combined_message = " ".join(item['message_text'] for item in queue_items)

    # üéôÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
    voice_messages = [item for item in queue_items if item['is_voice']]
    has_voice_messages = len(voice_messages) > 0

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    voice_alerts = [item['voice_alert'] for item in queue_items if item.get('voice_alert')]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await process_and_send_response(
        combined_message, chat_id, author_id, user_id, ad_url, user_name, thread_id,
        has_voice_messages=has_voice_messages, voice_alerts=voice_alerts
    )


async def process_and_send_response(combined_message, chat_id, author_id, user_id, ad_url, user_name, thread_id,
                                    has_voice_messages=False, voice_alerts=None):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç """
    logger.info(f'[Logic] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {chat_id}')

    if voice_alerts is None:
        voice_alerts = []

    chat_url = f'https://www.avito.ru/profile/messenger/channel/{chat_id}'

    # üéôÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ–º–ø—Ç
    if has_voice_messages:
        voice_prefix = "üéôÔ∏è –ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏): "
        combined_message = voice_prefix + combined_message
        logger.info(f"[Logic] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç: '{combined_message[:100]}...'")

    response = await process_message(
        client_id=author_id,
        user_id=user_id,
        chat_id=chat_id,
        message=combined_message,
        ad_url=ad_url,
        client_name=user_name,
        chat_url=chat_url
    )

    if response == "__emoji_only__":
        logger.info(f"[Logic] –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —ç–º–æ–¥–∑–∏ –≤ —á–∞—Ç–µ {chat_id}")
    elif response is None:
        logger.error(f'[Logic] –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤ —á–∞—Ç–µ {chat_id}')
    else:
        logger.info(f"[Logic] –ß–∞—Ç {chat_id}\n"
                    f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {response}")
        await send_message(user_id, chat_id, response)

        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞)
        display_message = combined_message.replace("üéôÔ∏è –ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏): ", "")
        telegram_message = f"üíÅ‚Äç‚ôÇÔ∏è {user_name}: {display_message}\nü§ñ –ë–æ—Ç: {response}\n_____\n\n"

        await send_alert(telegram_message, thread_id=thread_id)


@router.post("/chat")
async def chat(message: WebhookRequest, background_tasks: BackgroundTasks):
    """ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ """
    chat_id = message.payload.value.chat_id

    # üéôÔ∏è –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_type = message.payload.value.type
    if message.is_voice_message():
        voice_url = message.get_voice_url()
        duration = message.get_voice_duration()
        duration_str = f" ({duration}—Å)" if duration else ""
        logger.info(f"[Webhook] –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ{duration_str} –≤ —á–∞—Ç–µ {chat_id}: {voice_url}")
    elif message.is_text_message():
        text_preview = message.get_message_text()[:50] + "..." if len(
            message.get_message_text() or "") > 50 else message.get_message_text()
        logger.info(f"[Webhook] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: '{text_preview}'")
    else:
        logger.warning(f"[Webhook] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ '{message_type}' –≤ —á–∞—Ç–µ {chat_id}")

    background_tasks.add_task(message_collector, chat_id, message)
    return JSONResponse(content={"ok": True}, status_code=200)






