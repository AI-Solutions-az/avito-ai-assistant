from fastapi import APIRouter, BackgroundTasks
from fastapi.responses import JSONResponse
from app.models.schemas import WebhookRequest
from app.services.avito_api import send_message, get_ad, get_user_info
from app.services.gpt import process_message
from app.services.telegram_notifier import send_alert
from app.services.logs import logger
from db.chat_crud import get_chat_by_id, create_chat, update_chat
from app.services.telegram_notifier import create_telegram_forum_topic
from db.messages_crud import get_latest_message_by_chat_id
import asyncio

router = APIRouter()

# –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
message_queues = {}


async def message_collector(chat_id, message: WebhookRequest):
    """ –°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–æ–º """
    if chat_id not in message_queues:
        message_queues[chat_id] = asyncio.Queue()

    queue = message_queues[chat_id]
    await queue.put(message)

    # –ï—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤—ã—Ö–æ–¥–∏–º
    if queue.qsize() > 1:
        return

    await asyncio.sleep(8)  # –ñ–¥–µ–º 8 —Å–µ–∫—É–Ω–¥

    messages = []
    while not queue.empty():
        messages.append(await queue.get())

    # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    combined_message = " ".join(msg.payload.value.content.text for msg in messages)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    messages[-1].payload.value.content.text = combined_message

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    await process_and_send_response(messages[-1])


async def process_and_send_response(message: WebhookRequest):
    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç """
    logger.info(f'[Logic] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {message.payload.value.author_id}')
    message_text = message.payload.value.content.text
    chat_id = message.payload.value.chat_id
    user_id = message.payload.value.user_id
    author_id = message.payload.value.author_id
    item_id = message.payload.value.item_id

    chat_url = f'https://www.avito.ru/profile/messenger/channel/{chat_id}'
    ad_url = await get_ad(user_id, item_id)
    user_name, user_url = await get_user_info(user_id, chat_id)
    last_message = await get_latest_message_by_chat_id(chat_id)
    chat_object = await get_chat_by_id(chat_id)

    if not chat_object:
        logger.info("[Logic] –ß–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        thread_id = await create_telegram_forum_topic(f'{user_name}, {item_id}')
        await send_alert(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç\n–ö–ª–∏–µ–Ω—Ç: {user_name}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {user_url}\n"
                         f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad_url}\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_url}\n", thread_id)
        await create_chat(chat_id, thread_id, author_id, user_id, chat_url)

    if chat_object.under_assistant is False:
        logger.info(f'[Logic] –ß–∞—Ç –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ —á–∞—Ç–µ {chat_id} –¥–ª—è —é–∑–µ—Ä–∞ {user_id}')
        return None

    if user_id == author_id:
        if last_message == message_text:
            logger.info(f'[Logic] –•—É–∫ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}')
        else:
            await update_chat(chat_id=chat_id, under_assistant=False)
            await send_alert("‚ùóÔ∏è–ö —á–∞—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä", chat_object.thread_id)
            logger.info(f'[Logic] –ö —á–∞—Ç—É {chat_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä')
        return None

    response = await process_message(author_id, user_id, chat_id, message_text, ad_url, user_name, chat_url)

    if response:
        logger.info(f"[Logic] –û—Ç–≤–µ—Ç: {response}")
        await send_message(user_id, chat_id, response)
        await send_alert(f"üíÅ‚Äç‚ôÇÔ∏è {user_name}: {message_text}\nü§ñ –ë–æ—Ç: {response}\n_____\n\n",
                         thread_id=chat_object.thread_id)
    else:
        logger.error('[Logic] –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏')


@router.post("/chat")
async def chat(message: WebhookRequest, background_tasks: BackgroundTasks):
    """ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ """
    chat_id = message.payload.value.chat_id
    background_tasks.add_task(message_collector, chat_id, message)
    return JSONResponse(content={"ok": True}, status_code=200)