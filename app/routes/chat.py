from fastapi import APIRouter, BackgroundTasks
from fastapi.responses import JSONResponse
from app.models.schemas import WebhookRequest
from app.services.avito_api import send_message, get_ad, get_user_info
from app.services.gpt import process_message
import re
from app.services.telegram_bot import send_alert
from app.redis_db import add_chat, chat_exists, get_last_message
from app.services.logs import logger
from db.chat_crud import get_chat_by_id, create_chat, update_chat
from app.services.telegram_bot import create_telegram_forum_topic, get_telegram_updates
router = APIRouter()

# –í—ã–Ω–µ—Å–µ–Ω–∏–µ –¥–∂–æ–±—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def process_and_send_response(message: WebhookRequest):
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = message.payload.value.content.text
    chat_id = message.payload.value.chat_id
    user_id = message.payload.value.user_id
    author_id = message.payload.value.author_id
    item_id = message.payload.value.item_id
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥
    chat_url = f'https://www.avito.ru/profile/messenger/channel/{message.payload.value.chat_id}'
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    ad_url = await get_ad(message.payload.value.user_id, message.payload.value.item_id)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–≥–æ
    user_name, user_url = await get_user_info(message.payload.value.user_id, message.payload.value.chat_id)
    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
    last_assistant_message = await get_last_message(user_id, chat_id,'developer')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ë–î
    if not await get_chat_by_id(chat_id):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        await create_telegram_forum_topic(f'{user_name}, {item_id}')
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–ø–∏–∫–∞
        thread_id = await get_telegram_updates()
        # –ó–∞—Å—ã–ª–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å—Ä–∞–∑—É –≤ —á–∞—Ç
        await send_alert("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç\n"
                         f"–ö–ª–∏–µ–Ω—Ç: {user_name}\n"
                         f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {user_url}\n"
                         f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {ad_url}\n"
                         f"–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {chat_url}\n", thread_id)
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –≤ –ë–î
        await create_chat(chat_id, thread_id, author_id, user_id, chat_url)
        logger.info(f'–ù–æ–≤—ã–π —á–∞—Ç {chat_id} —Å–æ–∑–¥–∞–Ω')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–µ—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    chat_object = await get_chat_by_id(chat_id)
    if chat_object.under_assistant is False:
        logger.info(f'–ß–∞—Ç –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ —á–∞—Ç–µ {chat_id} –¥–ª—è —é–∑–µ—Ä–∞ {user_id}')
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç –∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id==author_id:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if last_assistant_message==message_text:
            # –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ–≤–ø–∞–ª–∏
            logger.info(f'–•—É–∫ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}')
        else:
            # –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            # –û—Ç–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
            await update_chat(chat_id=chat_id, under_assistant=False)
            await send_alert("‚ùóÔ∏è–ö —á–∞—Ç—É –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä", chat_object.thread_id)
            logger.info(f'–ö —á–∞—Ç—É {chat_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä')
        return None

    response = await process_message(author_id, user_id, chat_id,
                                     message_text, ad_url, user_name, chat_url)
    if response:
        logger.info(f"–û—Ç–≤–µ—Ç: {response}")
        logger.info('4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
        await send_message(user_id, chat_id, response)
        logger.info("5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª")
        await send_alert(f"üíÅ‚Äç‚ôÇÔ∏è {user_name}: {message_text}\n"
                         f"ü§ñ –ë–æ—Ç: {response}\n"
                         f"_____\n\n", thread_id=chat_object.thread_id)
        return None
    else:
        logger.error('–ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏')
        return None

@router.post("/chat")
async def chat(message: WebhookRequest, background_tasks: BackgroundTasks):
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ —Ñ–æ–Ω–µ
    background_tasks.add_task(process_and_send_response, message)

    return JSONResponse(content={"ok": True}, status_code=200)