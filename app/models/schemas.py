from pydantic import BaseModel, field_validator
from typing import Optional, Any


# üéôÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–û–î–ï–õ–ò –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
class MessageContent(BaseModel):
    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    text: Optional[str] = None

    # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    url: Optional[str] = None
    duration: Optional[int] = None
    size: Optional[int] = None
    format: Optional[str] = None

    @field_validator('text', 'url', 'format', mode='before')
    @classmethod
    def empty_str_to_none(cls, v: Any) -> Any:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ None"""
        if v == '':
            return None
        return v


# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (value)
class MessageValue(BaseModel):
    id: str
    chat_id: str
    user_id: int
    author_id: int
    created: int
    type: str  # "text" –∏–ª–∏ "voice"
    chat_type: str
    content: MessageContent  # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    item_id: int
    published_at: str


# –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª–µ–∑–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ (payload)
class Payload(BaseModel):
    type: str
    value: MessageValue


# –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
class WebhookRequest(BaseModel):
    id: str
    version: str
    timestamp: int
    payload: Payload

    def is_voice_message(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–º"""
        return (
                self.payload.value.type == "voice" and
                self.payload.value.content.url is not None and
                self.payload.value.content.url.strip() != ""
        )

    def is_text_message(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º"""
        return (
                self.payload.value.type == "text" and
                self.payload.value.content.text is not None and
                self.payload.value.content.text.strip() != ""
        )

    def get_message_text(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        if self.is_text_message():
            return self.payload.value.content.text
        return None

    def get_voice_url(self) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.is_voice_message():
            return self.payload.value.content.url
        return None

    def get_voice_duration(self) -> Optional[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.is_voice_message():
            return self.payload.value.content.duration
        return None


# –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
class ProcessedMessage(BaseModel):
    chat_id: str
    message_id: str
    user_id: int
    author_id: int
    message_type: str  # "text" –∏–ª–∏ "voice"
    original_content: str  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ URL
    processed_text: str  # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    is_from_voice: bool = False  # –ë—ã–ª –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice_processing_time: Optional[float] = None  # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö